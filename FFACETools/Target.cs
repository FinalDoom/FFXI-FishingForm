using System;

namespace FFACETools
{
    public partial class FFACE
    {
        /// <summary>
        /// Wrapper class for target information from FFACE
        /// </summary>
        public class TargetTools
        {
            #region Constructor

            /// <summary>
            /// Constructor
            /// </summary>
            /// <param name="instanceID">Instance ID generated by FFACE</param>
            public TargetTools (int instanceID)
            {
                _InstanceID = instanceID;

            } // @ public Target(int instance)

            #endregion

            #region Members

            /// <summary>
            /// Instance ID generated by FFACE
            /// </summary>
            private int _InstanceID { get; set; }

            /// <summary>
            /// Targets current ID
            /// </summary>
            public int ID
            {
                get { return GetTargetInformation().CurrentID; }

            } // @ public int ID

            /// <summary>
            /// UNKNOWN
            /// </summary>
            public int SubID
            {
                get { return GetTargetInformation().SubID; }

            } // @ public int SubID

            /// <summary>
            /// Targets server ID
            /// </summary>
            public int ServerID
            {
                get { return GetTargetInformation().CurrentSvrID; }

            } // @ public int ServerID

            /// <summary>
            /// UNKNOWN
            /// </summary>
            public int SubServerID
            {
                get { return GetTargetInformation().SubSrvID; }

            } // @ public int SubServerID

            /// <summary>
            /// UNKNOWN
            /// </summary>
            public ushort Mask
            {
                get { return GetTargetInformation().CurrentMask; }

            } // @ public ushort Mask

            /// <summary>
            /// UNKNOWN
            /// </summary>
            public ushort SubMask
            {
                get { return GetTargetInformation().SubMask; }

            } // @ public ushort SubMask

            /// <summary>
            /// If you are locked onto the target or not
            /// </summary>
            public bool IsLocked
            {
                get { return Convert.ToBoolean(GetTargetInformation().IsLocked); }

            } // @ public bool IsLocked

            /// <summary>
            /// UNKNOWN
            /// </summary>
            public bool IsSub
            {
                get { return Convert.ToBoolean(GetTargetInformation().IsSub); }

            } // @ public bool IsSub

            /// <summary>
            /// Targets current hit point percent
            /// </summary>
            public short HPPCurrent
            {
                get { return GetTargetInformation().HPP; }

            } // @ public short HPPCurrent

            /// <summary>
            /// Name of the target
            /// </summary>
            public string Name
            {
                get { return GetTargetInformation().Name; }

            } // @ public string Name

            /// <summary>
            /// Status of the target
            /// </summary>
            public Status Status
            {
                get { return GetNPCStatus(_InstanceID, ID); }

            } // @ public Status Status

            /// <summary>
            /// X position of the target
            /// </summary>
            public float PosX
            {
                get { return GetNPCPosX(_InstanceID, ID); }

            } // @ public double PosX

            /// <summary>
            /// Y position of the target
            /// </summary>
            public float PosY
            {
                get { return GetNPCPosY(_InstanceID, ID); }

            } // @ public double PosY

            /// <summary>
            /// Z position of the target
            /// </summary>
            public float PosZ
            {
                get { return GetNPCPosZ(_InstanceID, ID); }

            } // @ public double PosZ

            /// <summary>
            /// H position of the target
            /// </summary>
            public float PosH
            {
                get { return GetNPCPosH(_InstanceID, ID); }

            } // @ public double PosH

            /// <summary>
            /// Target position and heading
            /// </summary>
            public Position Position
            {
                get
                {
                    return new Position
                    {
                        X = GetNPCPosX(_InstanceID, ID),
                        Y = GetNPCPosY(_InstanceID, ID),
                        Z = GetNPCPosZ(_InstanceID, ID),
                        H = GetNPCPosH(_InstanceID, ID)
                    };
                }
            } // @ public Position Position

            /// <summary>
            /// The type of NPC is it
            /// </summary>
            public NPCType Type
            {
                get { return GetNPCType(_InstanceID, ID); }

            } // @ public NPCType Type

            #endregion

            #region Methods

            /// <summary>
            /// Gets the TARGETINFO struct from FFACE
            /// </summary>
            private TARGETINFO GetTargetInformation ()
            {
                TARGETINFO target = new TARGETINFO();
                GetTargetInfo(_InstanceID, ref target);

                return target;

            } // @ private TARGETINFO GetTargetInformation()

            /// <summary>
            /// Sets the target to the index value provided in the NPC array
            /// </summary>
            /// <param name="index">NPC/PC Array Index; Set index to 0 to disable target lock</param>
            /// <returns>True on success, False on error</returns>
            public bool SetNPCTarget (int index)
            {
                return SetTarget(_InstanceID, index);
            }
            #endregion

        } // @ public class TargetTools
    } // @ public partial class FFACE
}
